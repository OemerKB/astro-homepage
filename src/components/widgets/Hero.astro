---
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';
import GradientOrbs from '~/components/ui/GradientOrbs';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';

import type { CallToAction } from '~/types';

export interface Props {
  title?: string;
  subtitle?: string;
  tagline?: string;
  content?: string;
  actions?: string | CallToAction[];
  image?: string | any;
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),
} = Astro.props;
---

<section class="relative min-h-screen flex items-center justify-center overflow-hidden bg-gradient-to-b from-white to-gray-50 dark:from-slate-900 dark:to-slate-800">
  <div class="absolute inset-0 pointer-events-none">
    <GradientOrbs client:load scale={1.8} speed={0.8} variant="all" />
  </div>
  
  <div class="relative w-full max-w-7xl mx-auto px-4 sm:px-6 z-10">
    <div class="flex flex-col items-center justify-center min-h-[calc(100vh-76px)]">
      <div class="text-center max-w-5xl">
        {
          tagline && (
            <p class="text-base text-secondary dark:text-blue-200 font-bold tracking-wide uppercase mb-4 animate-fade-in"
              set:html={tagline}
            />
          )
        }
        {
          title && (
            <h1 class="text-5xl md:text-6xl font-bold leading-tighter tracking-tighter mb-8 font-heading dark:text-gray-200 animate-fade-in-up"
              set:html={title}
            />
          )
        }
        <div class="max-w-3xl mx-auto">
          {
            subtitle && (
              <p class="text-xl text-gray-600 mb-12 dark:text-slate-400 animate-fade-in-up"
                set:html={subtitle}
              />
            )
          }
          {
            actions && (
              <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4 animate-fade-in-up">
                {
                  Array.isArray(actions) ? (
                    actions.map((action) => (
                      <div class="flex w-full sm:w-auto">
                        <Button {...(action || {})} class="w-full sm:mb-0" />
                      </div>
                    ))
                  ) : (
                    <Fragment set:html={actions} />
                  )
                }
              </div>
            )
          }
        </div>
      </div>
    </div>
  </div>
  {image && (
    <div class="relative m-auto max-w-5xl">
      {typeof image === 'string' ? (
        <Fragment set:html={image} />
      ) : (
        <Image
          class="mx-auto rounded-md w-full"
          widths={[400, 768, 1024, 2040]}
          sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
          loading="eager"
          width={1024}
          height={576}
          {...image}
        />
      )}
    </div>
  )}
</section>

<style>
  .animate-fade-in {
    animation: fadeIn 1s ease-out;
  }
  
  .animate-fade-in-up {
    animation: fadeInUp 1s ease-out;
  }
  
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
  
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>
